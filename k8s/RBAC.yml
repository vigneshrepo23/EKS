### first SERVICE ACCOUNT creation ###

apiVersion: v1
kind: ServiceAccount
metadata:
  name: test-serviceaccount
  namespace: vicky

### second ROLE creation ###

apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: vicky
  name: test-role
rules: # below are k8s doc values
# - apiGroups: [""] # indicates the core API group
#   resources: ["pods"]
#   verbs: ["get", "watch", "list"]
- apiGroups: ["*"] # indicates the core API group
  resources: ["*"] # all resoures [i.e pods, deployment]
  verbs: ["*"] # get, create, update, delete

### third ROLE BINDING creation ###

apiVersion: rbac.authorization.k8s.io/v1
# This role binding allows "jane" to read pods in the "default" namespace.
# You need to already have a Role named "pod-reader" in that namespace.
kind: RoleBinding # RoleBinding OR ClusterRoleBinding
metadata:
  name: test-rolebinding
  namespace: vicky
subjects: # You can specify more than one "subject" --> specify service account metadata in subjects
- kind: ServiceAccount
  name: test-serviceaccount # "name" is case sensitive
  apiGroup: "" #rbac.authorization.k8s.io
  # namespace: vicky
roleRef: # "roleRef" specifies the binding to a Role / ClusterRole
  kind: Role # kind must be desired Role [or] ClusterRole -> [full access across cluster]
  name: test-role # Role name or [cluster-admin [default in k8s, no creation required]]
  apiGroup: "" #rbac.authorization.k8s.io
